import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
import torchvision
import torchvision.transforms as transforms
from torch.utils.data import DataLoader
import matplotlib.pyplot as plt

# 设备配置
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# 数据预处理
transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5,), (0.5,))
])

# 加载数据集
train_dataset = torchvision.datasets.KMNIST(
    root='./data',
    train=True,
    download=True,
    transform=transform
)
test_dataset = torchvision.datasets.KMNIST(
    root='./data',
    train=False,
    download=True,
    transform=transform
)

# 基础模型
class BaseModel(nn.Module):
    def __init__(self):
        super(BaseModel, self).__init__()
        self.fc1 = nn.Linear(784, 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, 10)
        self.dropout = nn.Dropout(0.5)

    def forward(self, x):
        x = x.view(-1, 784)
        x = F.relu(self.fc1(x))
        x = self.dropout(x)
        x = F.relu(self.fc2(x))
        x = self.dropout(x)
        x = self.fc3(x)
        return x

# 增强模型（增加隐藏层）
class EnhancedModel(nn.Module):
    def __init__(self):
        super(EnhancedModel, self).__init__()
        self.fc1 = nn.Linear(784, 512)
        self.fc2 = nn.Linear(512, 256)
        self.fc3 = nn.Linear(256, 128)
        self.fc4 = nn.Linear(128, 10)
        self.dropout = nn.Dropout(0.5)

    def forward(self, x):
        x = x.view(-1, 784)
        x = F.relu(self.fc1(x))
        x = self.dropout(x)
        x = F.relu(self.fc2(x))
        x = self.dropout(x)
        x = F.relu(self.fc3(x))
        x = self.dropout(x)
        x = self.fc4(x)
        return x

def train_model(model, train_loader, test_loader, lr=0.001, batch_size=64, num_epochs=15):
    model = model.to(device)
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=lr)
    
    train_losses = []
    test_accuracies = []

    for epoch in range(num_epochs):
        model.train()
        running_loss = 0.0
        for images, labels in train_loader:
            images, labels = images.to(device), labels.to(device)
            
            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            
            running_loss += loss.item() * images.size(0)
        
        epoch_loss = running_loss / len(train_loader.dataset)
        train_losses.append(epoch_loss)
        
        # 测试准确率
        model.eval()
        correct, total = 0, 0
        with torch.no_grad():
            for images, labels in test_loader:
                images, labels = images.to(device), labels.to(device)
                outputs = model(images)
                _, predicted = torch.max(outputs.data, 1)
                total += labels.size(0)
                correct += (predicted == labels).sum().item()
        
        accuracy = 100 * correct / total
        test_accuracies.append(accuracy)
        
        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {epoch_loss:.4f}, Accuracy: {accuracy:.2f}%')
    
    return train_losses, test_accuracies

# 实验设置
batch_sizes = [64, 128, 256]
learning_rates = [0.1, 0.01, 0.001, 0.0001]

# 不同批次大小实验
plt.figure(figsize=(12, 6))
for bs in batch_sizes:
    train_loader = DataLoader(train_dataset, batch_size=bs, shuffle=True)
    test_loader = DataLoader(test_dataset, batch_size=bs, shuffle=False)
    model = BaseModel()
    _, test_acc = train_model(model, train_loader, test_loader, lr=0.001, batch_size=bs, num_epochs=15)
    plt.plot(test_acc, label=f'Batch Size {bs}')
plt.xlabel('Epoch')
plt.ylabel('Accuracy (%)')
plt.title('Batch Size Comparison')
plt.legend()
plt.show()

# 不同学习率实验
plt.figure(figsize=(12, 6))
for lr in learning_rates:
    model = BaseModel()
    train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)
    test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)
    _, test_acc = train_model(model, train_loader, test_loader, lr=lr, num_epochs=15)
    plt.plot(test_acc, label=f'LR {lr}')
plt.xlabel('Epoch')
plt.ylabel('Accuracy (%)')
plt.title('Learning Rate Comparison')
plt.legend()
plt.show()

# 模型结构对比
model = EnhancedModel()
train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)
_, enhanced_acc = train_model(model, train_loader, test_loader, lr=0.001, num_epochs=15)

model = BaseModel()
_, base_acc = train_model(model, train_loader, test_loader, lr=0.001, num_epochs=15)

plt.figure(figsize=(12, 6))
plt.plot(base_acc, label='Base Model')
plt.plot(enhanced_acc, label='Enhanced Model')
plt.xlabel('Epoch')
plt.ylabel('Accuracy (%)')
plt.title('Model Architecture Comparison')
plt.legend()
plt.show()
